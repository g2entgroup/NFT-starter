[{"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/index.js":"1","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/App.js":"2","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/utils/BaseSVG.js":"3","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Layout.js":"4","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/ImagePreview.js":"5","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/DisplayLinks.js":"6","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/ConnectWalletButton.js":"7","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/NFTViewer.js":"8","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Link.js":"9","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/MintNFTInput.js":"10","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Status.js":"11","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Header.js":"12","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Footer.js":"13"},{"size":226,"mtime":1642305144229,"results":"14","hashOfConfig":"15"},{"size":12805,"mtime":1642311336001,"results":"16","hashOfConfig":"15"},{"size":73381,"mtime":1642352911101,"results":"17","hashOfConfig":"15"},{"size":1095,"mtime":1642305144227,"results":"18","hashOfConfig":"15"},{"size":329,"mtime":1642305144227,"results":"19","hashOfConfig":"15"},{"size":620,"mtime":1642305144226,"results":"20","hashOfConfig":"15"},{"size":272,"mtime":1642305144226,"results":"21","hashOfConfig":"15"},{"size":778,"mtime":1642305144228,"results":"22","hashOfConfig":"15"},{"size":256,"mtime":1642305144227,"results":"23","hashOfConfig":"15"},{"size":886,"mtime":1642305144228,"results":"24","hashOfConfig":"15"},{"size":788,"mtime":1642305144228,"results":"25","hashOfConfig":"15"},{"size":611,"mtime":1642308574597,"results":"26","hashOfConfig":"15"},{"size":461,"mtime":1642308671974,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"19eepuh",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/index.js",[],["58","59"],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/App.js",["60","61","62","63","64","65"],"import React, { useState, useEffect } from \"react\";\n\n/* ERC71 based Solidity Contract Interface */\nimport filecoinNFTHack from \"./utils/FilecoinNFTHack.json\";\n\n/* NFT.Storage import for creating an IPFS CID & storing with Filecoin */\nimport { NFTStorage, File } from \"nft.storage\";\nimport { baseSVG } from \"./utils/BaseSVG\";\n\n/* Javascript Lib for evm-compatible blockchain contracts */\nimport { ethers } from \"ethers\";\n\n/* UI Components & Style*/\nimport \"./styles/App.css\";\nimport Layout from \"./components/Layout\";\nimport MintNFTInput from \"./components/MintNFTInput\";\nimport Status from \"./components/Status\";\nimport ImagePreview from \"./components/ImagePreview\";\nimport Link from \"./components/Link\";\nimport DisplayLinks from \"./components/DisplayLinks\";\nimport ConnectWalletButton from \"./components/ConnectWalletButton\";\nimport NFTViewer from \"./components/NFTViewer\";\n\nconst INITIAL_LINK_STATE = {\n  etherscan: \"\",\n  opensea: \"\",\n  rarible: \"\",\n  zora: \"\"\n};\n\nconst INITIAL_TRANSACTION_STATE = {\n  loading: \"\",\n  error: \"\",\n  success: \"\",\n  warning: \"\",\n};\n\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [linksObj, setLinksObj] = useState(INITIAL_LINK_STATE);\n  const [imageView, setImageView] = useState(\"\");\n  const [remainingNFTs, setRemainingNFTs] = useState(\"\");\n  const [nftCollectionData, setNftCollectionData] = useState(\"\");\n  const [recentlyMinted, setRecentlyMinted] = useState(\"\");\n  const [transactionState, setTransactionState] = useState(\n    INITIAL_TRANSACTION_STATE\n  );\n  const { loading, error, success } = transactionState; //make it easier\n\n  /* runs on page load - checks wallet is connected */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  /* If a wallet is connected, do some setup */\n  useEffect(() => {\n    setUpEventListener();\n    fetchNFTCollection();\n  }, [currentAccount]);\n\n  /* Check for a wallet */\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n      setUpEventListener();\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      setCurrentAccount(accounts[0]);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    //TODO: make sure on right network or change programatically\n    // let chainId = await ethereum.request({ method: 'eth_chainId' });\n    // console.log(\"Connected to chain \" + chainId);\n\n    // // String, hex code of the chainId of the Rinkebey test network\n    // const rinkebyChainId = \"0x4\";\n    // if (chainId !== rinkebyChainId) {\n    //   alert(\"You are not connected to the Rinkeby Test Network!\");\n    // }\n  };\n\n  /* Connect a wallet */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /* Listens for events emitted from the solidity contract, to render data accurately */\n  const setUpEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          filecoinNFTHack.abi,\n          signer\n        );\n\n        connectedContract.on(\"RemainingMintableNFTChange\", (remainingNFTs) => {\n          setRemainingNFTs(remainingNFTs);\n        });\n        connectedContract.on(\n          \"NewFilecoinNFTMinted\",\n          (sender, tokenId, tokenURI) => {\n            console.log(\"event - new minted NFT\");\n            fetchNFTCollection();\n          }\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /* Helper function for createNFTData */\n  const resetState = () => {\n    setLinksObj(INITIAL_LINK_STATE);\n    setName(\"\");\n    setImageView(\"\");\n  }\n\n  /* Helper function for createNFTData */\n  const createImageView = (metadata) => {\n    let imgViewArray = metadata.data.image.pathname.split(\"/\");\n    let imgViewString = `https://${imgViewArray[2]}.ipfs.dweb.link/${imgViewArray[3]}`;\n    setImageView(\n      imgViewString\n    );\n    console.log(\n      \"image view set\",\n      `https://${imgViewArray[2]}.ipfs.dweb.link/${imgViewArray[3]}`\n    );\n  } \n\n  /* Create the IPFS CID of the json data */\n  const createNFTData = async () => {\n    console.log(\"saving to NFT storage\");\n    resetState();\n    setTransactionState({\n      ...INITIAL_TRANSACTION_STATE,\n      loading: \"Saving NFT data to NFT.Storage...\",\n    });\n\n    // install it\n    // Set Up the NFT.Storage Client\n    const client = new NFTStorage({\n      token: process.env.REACT_APP_NFT_STORAGE_API_KEY,\n    });\n\n    //lets load up this token with some metadata and our image and save it to NFT.storage\n    //image contains any File or Blob you want to save\n    //name, image, description, other traits.\n    // useBlob to save one item to IPFS\n    // use File to save all the json metadata needed - much like any object storage you're familiar with!\n    try {\n      await client\n        .store({\n          name: `${name}: Creative NFTHack 2022`,\n          description:\n            \"NFTs created for EthGlobal NFTHack 2022 and limited to 100 personalised tokens\",\n          image: new File(\n            [\n              `${baseSVG}${name}</text>\n      </svg>`,\n            ],\n            `creativeArtboard.svg`,\n            {\n              type: \"image/svg+xml\",\n            }\n          ),\n          traits: {\n            access: \"100\", //probs should use 0-1 for solidity\n          },\n        })\n        .then((metadata) => {\n          setTransactionState({\n            ...transactionState,\n            success: \"Saved NFT data to NFT.Storage...!! We created an IPFS CID & made a Filecoin Storage Deal with one call!\",\n            loading: \"\",\n          });\n          console.log(\"metadata saved\", metadata);\n\n          // To view the data we just saved in the browser we need to use an IPFS http bridge\n          // Or Brave Browser which has IPFS integration built into it\n          // Or run a local IPFS node (there's a desktop app)\n          // This means manipulating the returned CID to configure it for a gateway...\n          // Check gateways & their functionality here: https://ipfs.github.io/public-gateway-checker/\n          createImageView(metadata);\n          \n          //we can also check the status of our data using this\n          // const status = await client.status(metadata.ipnft);\n          // console.log(\"status\", status);\n\n          // Now that we have a CID and our data is stored on Filecoin, \n          // - we'll mint the NFT with the token data (and IPFS CID)\n          askContractToMintNft(metadata.url);\n        });\n    } catch (error) {\n      console.log(\"Could not save NFT to NFT.Storage - Aborted minting\");\n      setTransactionState({\n        ...INITIAL_TRANSACTION_STATE,\n        error: \"Could not save NFT to NFT.Storage - Aborted minting\",\n      });\n    }\n  };\n\n  /* Mint the NFT on the eth blockchain */\n  const askContractToMintNft = async (IPFSurl) => {\n    //should check the wallet chain is correct here\n    setTransactionState({\n      ...INITIAL_TRANSACTION_STATE,\n      loading: \"Approving & minting NFT...\",\n    });\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          filecoinNFTHack.abi,\n          signer\n        );\n\n        console.log(\"Opening wallet\");\n        let nftTxn = await connectedContract.mintMyNFT(IPFSurl);\n\n        connectedContract.on(\n          \"NewFilecoinNFTMinted\",\n          (from, tokenId, tokenURI) => {\n            console.log(\"event listener\", from, tokenId.toNumber(), tokenURI);\n            setLinksObj({\n              ...linksObj,\n              opensea: `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`,\n              rarible: `https://rinkeby.rarible.com/token/${CONTRACT_ADDRESS}:${tokenId.toNumber()}`,\n              etherscan: `https://rinkeby.etherscan.io/tx/${nftTxn.hash}`,\n              //zora: `https://rinkeby.zora.com`\n            });\n          }\n        );\n\n        //SHOULD UPDATE IMAGELINK to returned value\n        await nftTxn.wait();\n        setTransactionState({\n          ...INITIAL_TRANSACTION_STATE,\n          success: \"NFT Minted!\",\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n        setTransactionState({\n          ...INITIAL_TRANSACTION_STATE,\n          error: `No Wallet connected`,\n        });\n      }\n    } catch (error) {\n      setTransactionState({\n        ...INITIAL_TRANSACTION_STATE,\n        error: `Error Minting NFT. ${error.message}`,\n      });\n    }\n  };\n\n  /* Helper function - manipulating the returned CID into a http link using IPFS gateway */\n  const createIPFSgatewayLink = (el) => {\n    let link = el[1].split(\"/\");\n    let fetchURL = `https://${link[2]}.ipfs.dweb.link/${link[3]}`;\n    return fetchURL;\n  }\n\n  /* \n    Helper function for fetching the Filecoin data through IPFS gateways \n    to display the images in the UI \n  */\n  const createImageURLsForRetrieval = async (collection) => {\n    let dataCollection = collection\n    .slice()\n    .reverse()\n    .slice(0, 5)\n    .map((el) => {\n      return el;\n    });\n\n    let imgURLs = await Promise.all(\n      dataCollection.map(async (el) => {\n        const ipfsGatewayLink = createIPFSgatewayLink(el);\n        // let link = el[1].split(\"/\");\n        // let fetchURL = `https://${link[2]}.ipfs.dweb.link/${link[3]}`;\n        console.log(\"fetchURL\", ipfsGatewayLink);\n        const response = await fetch(ipfsGatewayLink, \n      //     {\n      //     method : \"GET\",\n      //     mode: 'cors',\n      //     type: 'cors',\n      //     headers: {}\n      // }\n      );\n        const json = await response.json();\n        // console.log(\"Responsejson\", json)\n        return json;\n      })\n    );\n\n    console.log(\"imgURLs2\", imgURLs);\n    setRecentlyMinted(imgURLs);\n  }\n\n /* Function to get our collection Data from\n    1. The blockchain\n    2. Filecoin via IPFS addressing & http gateways\n */\n  const fetchNFTCollection = async () => {\n    console.log(\"fetching nft collection\");\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          filecoinNFTHack.abi,\n          signer\n        );\n\n        let remainingNFTs = await connectedContract.remainingMintableNFTs();\n        setRemainingNFTs(remainingNFTs.toNumber()); //update state\n\n        let collection = await connectedContract.getNFTCollection();\n        setNftCollectionData(collection); //update state\n        console.log(\"collection\", collection);\n\n        /***\n         * Going to put these in the view collection\n         */\n        await createImageURLsForRetrieval(collection);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  /* Render our page */\n  return (\n    <Layout connected={currentAccount === \"\"} connectWallet={connectWallet}>\n      <>\n        <p className=\"sub-sub-text\">{`Remaining NFT's: ${remainingNFTs}`}</p>\n        {transactionState !== INITIAL_TRANSACTION_STATE && <Status transactionState={transactionState}/>}\n        {imageView &&\n          !linksObj.etherscan && <Link link={imageView} description=\"See IPFS image link\"/>}\n        {imageView && <ImagePreview imgLink ={imageView}/>}\n        {linksObj.etherscan && <DisplayLinks linksObj={linksObj} />}\n        {currentAccount === \"\" ? (\n          <ConnectWalletButton connectWallet={connectWallet}/>\n        ) : transactionState.loading ? (\n          <div />\n        ) : (\n          <MintNFTInput name={name} setName={setName} transactionState={transactionState} createNFTData={createNFTData}/>\n        )}\n        {recentlyMinted && <NFTViewer recentlyMinted={recentlyMinted}/>}\n      </>\n    </Layout>\n  );\n};\n\nexport default App;\n","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/utils/BaseSVG.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Layout.js",["66","67"],"import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport filecoinLogo from \"../assets/filecoin-logo.png\";\n\nconst Layout = (props) => {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-menu-container\">\n          <a href=\"https://filecoin.io/build\" target=\"_blank\" rel=\"noreferrer\">\n            <img\n              alt=\"Filecoin Foundation Logo\"\n              style={{ height: \"50px\" }}\n              src={filecoinLogo}\n            />\n          </a>\n          <button\n            onClick={props.connectWallet}\n            className={\n              props.connected\n                ? \"cta-button connect-to-wallet-button\"\n                : \"cta-button connect-wallet-button\"\n            }\n          >\n            {props.connected ? \"Connect to Wallet\" : \"Connected\"}\n          </button>\n        </div>\n        <div className=\"header-container\">\n          <Header />\n          {props.children}\n        </div>\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/ImagePreview.js",["68"],"import React from \"react\";\n\nconst ImagePreview = ({imgLink, ...props}) => {\nreturn(\n    <div style={{marginTop: \"20px\"}}>\n      <img\n        src={imgLink}\n        alt=\"NFT image preview\"\n        height=\"200px\"\n        width=\"200px\"\n        style={{ backgroundColor: \"white\" }}\n      />\n    </div>)\n}\n\nexport default ImagePreview;","/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/DisplayLinks.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/ConnectWalletButton.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/NFTViewer.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Link.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/MintNFTInput.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Status.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Header.js",[],"/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/src/components/Footer.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":46,"column":10,"nodeType":"75","messageId":"76","endLine":46,"endColumn":27},{"ruleId":"73","severity":1,"message":"77","line":51,"column":11,"nodeType":"75","messageId":"76","endLine":51,"endColumn":18},{"ruleId":"73","severity":1,"message":"78","line":51,"column":20,"nodeType":"75","messageId":"76","endLine":51,"endColumn":25},{"ruleId":"73","severity":1,"message":"79","line":51,"column":27,"nodeType":"75","messageId":"76","endLine":51,"endColumn":34},{"ruleId":"80","severity":1,"message":"81","line":56,"column":6,"nodeType":"82","endLine":56,"endColumn":8,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":62,"column":6,"nodeType":"82","endLine":62,"endColumn":22,"suggestions":"85"},{"ruleId":"73","severity":1,"message":"86","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"87","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"89","line":6,"column":7,"nodeType":"90","endLine":12,"endColumn":9},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'nftCollectionData' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'success' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkIfWalletIsConnected'. Either include it or remove the dependency array.","ArrayExpression",["93"],"React Hook useEffect has missing dependencies: 'fetchNFTCollection' and 'setUpEventListener'. Either include them or remove the dependency array.",["94"],"'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [checkIfWalletIsConnected]",{"range":"99","text":"100"},"Update the dependencies array to be: [currentAccount, fetchNFTCollection, setUpEventListener]",{"range":"101","text":"102"},[1830,1832],"[checkIfWalletIsConnected]",[1961,1977],"[currentAccount, fetchNFTCollection, setUpEventListener]"]