{"ast":null,"code":"import dirBuilder from './dir.js';\nimport fileBuilder from './file/index.js';\nimport errCode from 'err-code';\nimport rabin from '../chunker/rabin.js';\nimport fixedSize from '../chunker/fixed-size.js';\nimport validateChunks from './validate-chunks.js';\n\nfunction isIterable(thing) {\n  return Symbol.iterator in thing;\n}\n\nfunction isAsyncIterable(thing) {\n  return Symbol.asyncIterator in thing;\n}\n\nfunction contentAsAsyncIterable(content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return async function* () {\n        yield content;\n      }();\n    } else if (isIterable(content)) {\n      return async function* () {\n        yield* content;\n      }();\n    } else if (isAsyncIterable(content)) {\n      return content;\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n  }\n\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n}\n\nasync function* dagBuilder(source, blockstore, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true;\n      }\n\n      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n    }\n\n    if (entry.content) {\n      let chunker;\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker;\n      } else if (options.chunker === 'rabin') {\n        chunker = rabin;\n      } else {\n        chunker = fixedSize;\n      }\n\n      let chunkValidator;\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator;\n      } else {\n        chunkValidator = validateChunks;\n      }\n\n      const file = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode,\n        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n      };\n      yield () => fileBuilder(file, blockstore, options);\n    } else if (entry.path) {\n      const dir = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode\n      };\n      yield () => dirBuilder(dir, blockstore, options);\n    } else {\n      throw new Error('Import candidate must have content or path or both');\n    }\n  }\n}\n\nexport default dagBuilder;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/index.js"],"names":["dirBuilder","fileBuilder","errCode","rabin","fixedSize","validateChunks","isIterable","thing","Symbol","iterator","isAsyncIterable","asyncIterator","contentAsAsyncIterable","content","Uint8Array","Error","dagBuilder","source","blockstore","options","entry","path","substring","wrapWithDirectory","split","filter","join","chunker","chunkValidator","file","mtime","mode","dir"],"mappings":"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","sourcesContent":["import dirBuilder from './dir.js';\nimport fileBuilder from './file/index.js';\nimport errCode from 'err-code';\nimport rabin from '../chunker/rabin.js';\nimport fixedSize from '../chunker/fixed-size.js';\nimport validateChunks from './validate-chunks.js';\nfunction isIterable(thing) {\n  return Symbol.iterator in thing;\n}\nfunction isAsyncIterable(thing) {\n  return Symbol.asyncIterator in thing;\n}\nfunction contentAsAsyncIterable(content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return async function* () {\n        yield content;\n      }();\n    } else if (isIterable(content)) {\n      return async function* () {\n        yield* content;\n      }();\n    } else if (isAsyncIterable(content)) {\n      return content;\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n  }\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n}\nasync function* dagBuilder(source, blockstore, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true;\n      }\n      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n    }\n    if (entry.content) {\n      let chunker;\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker;\n      } else if (options.chunker === 'rabin') {\n        chunker = rabin;\n      } else {\n        chunker = fixedSize;\n      }\n      let chunkValidator;\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator;\n      } else {\n        chunkValidator = validateChunks;\n      }\n      const file = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode,\n        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n      };\n      yield () => fileBuilder(file, blockstore, options);\n    } else if (entry.path) {\n      const dir = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode\n      };\n      yield () => dirBuilder(dir, blockstore, options);\n    } else {\n      throw new Error('Import candidate must have content or path or both');\n    }\n  }\n}\nexport default dagBuilder;"]},"metadata":{},"sourceType":"module"}