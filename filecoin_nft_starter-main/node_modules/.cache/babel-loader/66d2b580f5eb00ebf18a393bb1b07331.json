{"ast":null,"code":"import { BaseBlockstore } from './base.js';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as raw from 'multiformats/codecs/raw';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as Errors from './errors.js';\nexport class MemoryBlockstore extends BaseBlockstore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  open() {\n    return Promise.resolve();\n  }\n\n  close() {\n    return Promise.resolve();\n  }\n\n  async put(key, val) {\n    this.data[base32.encode(key.multihash.bytes)] = val;\n  }\n\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists) throw Errors.notFoundError();\n    return this.data[base32.encode(key.multihash.bytes)];\n  }\n\n  async has(key) {\n    return this.data[base32.encode(key.multihash.bytes)] !== undefined;\n  }\n\n  async delete(key) {\n    delete this.data[base32.encode(key.multihash.bytes)];\n  }\n\n  async *_all() {\n    yield* Object.entries(this.data).map(_ref => {\n      let [key, value] = _ref;\n      return {\n        key: CID.createV1(raw.code, Digest.decode(base32.decode(key))),\n        value\n      };\n    });\n  }\n\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(_ref2 => {\n      let [key] = _ref2;\n      return CID.createV1(raw.code, Digest.decode(base32.decode(key)));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/blockstore-core/esm/src/memory.js"],"names":["BaseBlockstore","base32","raw","CID","Digest","Errors","MemoryBlockstore","constructor","data","open","Promise","resolve","close","put","key","val","encode","multihash","bytes","get","exists","has","notFoundError","undefined","delete","_all","Object","entries","map","value","createV1","code","decode","_allKeys"],"mappings":"AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,yBAArB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,4BAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;AACA,OAAO,MAAMC,gBAAN,SAA+BN,cAA/B,CAA8C;AACnDO,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD;;AACDC,EAAAA,IAAI,GAAG;AACL,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AACDC,EAAAA,KAAK,GAAG;AACN,WAAOF,OAAO,CAACC,OAAR,EAAP;AACD;;AACQ,QAAHE,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAW;AAClB,SAAKP,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,IAAgDH,GAAhD;AACD;;AACQ,QAAHI,GAAG,CAACL,GAAD,EAAM;AACb,UAAMM,MAAM,GAAG,MAAM,KAAKC,GAAL,CAASP,GAAT,CAArB;AACA,QAAI,CAACM,MAAL,EACE,MAAMf,MAAM,CAACiB,aAAP,EAAN;AACF,WAAO,KAAKd,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,CAAP;AACD;;AACQ,QAAHG,GAAG,CAACP,GAAD,EAAM;AACb,WAAO,KAAKN,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,MAAkDK,SAAzD;AACD;;AACW,QAANC,MAAM,CAACV,GAAD,EAAM;AAChB,WAAO,KAAKN,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,CAAP;AACD;;AACU,SAAJO,IAAI,GAAG;AACZ,WAAOC,MAAM,CAACC,OAAP,CAAe,KAAKnB,IAApB,EAA0BoB,GAA1B,CAA8B;AAAA,UAAC,CAACd,GAAD,EAAMe,KAAN,CAAD;AAAA,aAAmB;AACtDf,QAAAA,GAAG,EAAEX,GAAG,CAAC2B,QAAJ,CAAa5B,GAAG,CAAC6B,IAAjB,EAAuB3B,MAAM,CAAC4B,MAAP,CAAc/B,MAAM,CAAC+B,MAAP,CAAclB,GAAd,CAAd,CAAvB,CADiD;AAEtDe,QAAAA;AAFsD,OAAnB;AAAA,KAA9B,CAAP;AAID;;AACc,SAARI,QAAQ,GAAG;AAChB,WAAOP,MAAM,CAACC,OAAP,CAAe,KAAKnB,IAApB,EAA0BoB,GAA1B,CAA8B;AAAA,UAAC,CAACd,GAAD,CAAD;AAAA,aAAWX,GAAG,CAAC2B,QAAJ,CAAa5B,GAAG,CAAC6B,IAAjB,EAAuB3B,MAAM,CAAC4B,MAAP,CAAc/B,MAAM,CAAC+B,MAAP,CAAclB,GAAd,CAAd,CAAvB,CAAX;AAAA,KAA9B,CAAP;AACD;;AAlCkD","sourcesContent":["import { BaseBlockstore } from './base.js';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as raw from 'multiformats/codecs/raw';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as Errors from './errors.js';\nexport class MemoryBlockstore extends BaseBlockstore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n  open() {\n    return Promise.resolve();\n  }\n  close() {\n    return Promise.resolve();\n  }\n  async put(key, val) {\n    this.data[base32.encode(key.multihash.bytes)] = val;\n  }\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists)\n      throw Errors.notFoundError();\n    return this.data[base32.encode(key.multihash.bytes)];\n  }\n  async has(key) {\n    return this.data[base32.encode(key.multihash.bytes)] !== undefined;\n  }\n  async delete(key) {\n    delete this.data[base32.encode(key.multihash.bytes)];\n  }\n  async *_all() {\n    yield* Object.entries(this.data).map(([key, value]) => ({\n      key: CID.createV1(raw.code, Digest.decode(base32.decode(key))),\n      value\n    }));\n  }\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(([key]) => CID.createV1(raw.code, Digest.decode(base32.decode(key))));\n  }\n}"]},"metadata":{},"sourceType":"module"}