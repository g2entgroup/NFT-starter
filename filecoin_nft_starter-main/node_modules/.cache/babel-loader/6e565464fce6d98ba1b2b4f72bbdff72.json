{"ast":null,"code":"import { normaliseInput as normaliseInputSingle } from 'ipfs-core-utils/files/normalise-input-single';\nimport { normaliseInput as normaliseInputMultiple } from 'ipfs-core-utils/files/normalise-input-multiple';\n\nfunction isBytes(obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;\n}\n\nfunction isBlob(obj) {\n  return Boolean(obj.constructor) && (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') && typeof obj.stream === 'function';\n}\n\nfunction isSingle(input) {\n  return typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || '_readableState' in input;\n}\n/**\n * Get a single or multiple normaliser depending on the input.\n */\n\n\nexport function getNormaliser(input) {\n  if (isSingle(input)) {\n    return normaliseInputSingle(input);\n  } else {\n    return normaliseInputMultiple(input);\n  }\n}","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/ipfs-car/dist/esm/pack/utils/normalise-input.js"],"names":["normaliseInput","normaliseInputSingle","normaliseInputMultiple","isBytes","obj","ArrayBuffer","isView","isBlob","Boolean","constructor","name","stream","isSingle","input","String","getNormaliser"],"mappings":"AAAA,SAASA,cAAc,IAAIC,oBAA3B,QAAuD,8CAAvD;AACA,SAASD,cAAc,IAAIE,sBAA3B,QAAyD,gDAAzD;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAClB,SAAOC,WAAW,CAACC,MAAZ,CAAmBF,GAAnB,KAA2BA,GAAG,YAAYC,WAAjD;AACH;;AACD,SAASE,MAAT,CAAgBH,GAAhB,EAAqB;AACjB,SAAOI,OAAO,CAACJ,GAAG,CAACK,WAAL,CAAP,KACFL,GAAG,CAACK,WAAJ,CAAgBC,IAAhB,KAAyB,MAAzB,IAAmCN,GAAG,CAACK,WAAJ,CAAgBC,IAAhB,KAAyB,MAD1D,KAEH,OAAON,GAAG,CAACO,MAAX,KAAsB,UAF1B;AAGH;;AACD,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYC,MAA9C,IAAwDX,OAAO,CAACU,KAAD,CAA/D,IAA0EN,MAAM,CAACM,KAAD,CAAhF,IAA2F,oBAAoBA,KAAtH;AACH;AACD;AACA;AACA;;;AACA,OAAO,SAASE,aAAT,CAAuBF,KAAvB,EAA8B;AACjC,MAAID,QAAQ,CAACC,KAAD,CAAZ,EAAqB;AACjB,WAAOZ,oBAAoB,CAACY,KAAD,CAA3B;AACH,GAFD,MAGK;AACD,WAAOX,sBAAsB,CAACW,KAAD,CAA7B;AACH;AACJ","sourcesContent":["import { normaliseInput as normaliseInputSingle } from 'ipfs-core-utils/files/normalise-input-single';\nimport { normaliseInput as normaliseInputMultiple } from 'ipfs-core-utils/files/normalise-input-multiple';\nfunction isBytes(obj) {\n    return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;\n}\nfunction isBlob(obj) {\n    return Boolean(obj.constructor) &&\n        (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n        typeof obj.stream === 'function';\n}\nfunction isSingle(input) {\n    return typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || '_readableState' in input;\n}\n/**\n * Get a single or multiple normaliser depending on the input.\n */\nexport function getNormaliser(input) {\n    if (isSingle(input)) {\n        return normaliseInputSingle(input);\n    }\n    else {\n        return normaliseInputMultiple(input);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}