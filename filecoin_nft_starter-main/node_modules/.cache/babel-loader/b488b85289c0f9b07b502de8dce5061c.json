{"ast":null,"code":"import { from } from 'multiformats/hashes/hasher';\nimport { bytes } from 'multiformats';\nimport mur from 'murmurhash3js-revisited';\n\nfunction fromNumberTo32BitBuf(number) {\n  const bytes = new Array(4);\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 255;\n    number = number >> 8;\n  }\n\n  return new Uint8Array(bytes);\n}\n\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 35,\n  encode: input => fromNumberTo32BitBuf(mur.x86.hash32(input))\n});\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 34,\n  encode: input => bytes.fromHex(mur.x64.hash128(input))\n});","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/@multiformats/murmur3/esm/index.js"],"names":["from","bytes","mur","fromNumberTo32BitBuf","number","Array","i","Uint8Array","murmur332","name","code","encode","input","x86","hash32","murmur3128","fromHex","x64","hash128"],"mappings":"AAAA,SAASA,IAAT,QAAqB,4BAArB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,yBAAhB;;AACA,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AACpC,QAAMH,KAAK,GAAG,IAAII,KAAJ,CAAU,CAAV,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BL,IAAAA,KAAK,CAACK,CAAD,CAAL,GAAWF,MAAM,GAAG,GAApB;AACAA,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACD;;AACD,SAAO,IAAIG,UAAJ,CAAeN,KAAf,CAAP;AACD;;AACD,OAAO,MAAMO,SAAS,GAAGR,IAAI,CAAC;AAC5BS,EAAAA,IAAI,EAAE,YADsB;AAE5BC,EAAAA,IAAI,EAAE,EAFsB;AAG5BC,EAAAA,MAAM,EAAEC,KAAK,IAAIT,oBAAoB,CAACD,GAAG,CAACW,GAAJ,CAAQC,MAAR,CAAeF,KAAf,CAAD;AAHT,CAAD,CAAtB;AAKP,OAAO,MAAMG,UAAU,GAAGf,IAAI,CAAC;AAC7BS,EAAAA,IAAI,EAAE,aADuB;AAE7BC,EAAAA,IAAI,EAAE,EAFuB;AAG7BC,EAAAA,MAAM,EAAEC,KAAK,IAAIX,KAAK,CAACe,OAAN,CAAcd,GAAG,CAACe,GAAJ,CAAQC,OAAR,CAAgBN,KAAhB,CAAd;AAHY,CAAD,CAAvB","sourcesContent":["import { from } from 'multiformats/hashes/hasher';\nimport { bytes } from 'multiformats';\nimport mur from 'murmurhash3js-revisited';\nfunction fromNumberTo32BitBuf(number) {\n  const bytes = new Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 255;\n    number = number >> 8;\n  }\n  return new Uint8Array(bytes);\n}\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 35,\n  encode: input => fromNumberTo32BitBuf(mur.x86.hash32(input))\n});\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 34,\n  encode: input => bytes.fromHex(mur.x64.hash128(input))\n});"]},"metadata":{},"sourceType":"module"}