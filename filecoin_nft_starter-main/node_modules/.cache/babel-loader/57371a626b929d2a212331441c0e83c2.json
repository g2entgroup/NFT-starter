{"ast":null,"code":"'use strict';\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\n\nasync function* batch(source) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  /** @type {T[]} */\n  let things = [];\n\n  if (size < 1) {\n    size = 1;\n  }\n\n  for await (const thing of source) {\n    things.push(thing);\n\n    while (things.length >= size) {\n      yield things.slice(0, size);\n      things = things.slice(size);\n    }\n  }\n\n  while (things.length) {\n    yield things.slice(0, size);\n    things = things.slice(size);\n  }\n}\n\nmodule.exports = batch;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/it-batch/index.js"],"names":["batch","source","size","things","thing","push","length","slice","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAiBA,KAAjB,CAAwBC,MAAxB,EAA0C;AAAA,MAAVC,IAAU,uEAAH,CAAG;;AACxC;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,MAAID,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,CAAP;AACD;;AAED,aAAW,MAAME,KAAjB,IAA0BH,MAA1B,EAAkC;AAChCE,IAAAA,MAAM,CAACE,IAAP,CAAYD,KAAZ;;AAEA,WAAOD,MAAM,CAACG,MAAP,IAAiBJ,IAAxB,EAA8B;AAC5B,YAAMC,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBL,IAAhB,CAAN;AAEAC,MAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaL,IAAb,CAAT;AACD;AACF;;AAED,SAAOC,MAAM,CAACG,MAAd,EAAsB;AACpB,UAAMH,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBL,IAAhB,CAAN;AAEAC,IAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaL,IAAb,CAAT;AACD;AACF;;AAEDM,MAAM,CAACC,OAAP,GAAiBT,KAAjB","sourcesContent":["'use strict'\n\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\nasync function * batch (source, size = 1) {\n  /** @type {T[]} */\n  let things = []\n\n  if (size < 1) {\n    size = 1\n  }\n\n  for await (const thing of source) {\n    things.push(thing)\n\n    while (things.length >= size) {\n      yield things.slice(0, size)\n\n      things = things.slice(size)\n    }\n  }\n\n  while (things.length) {\n    yield things.slice(0, size)\n\n    things = things.slice(size)\n  }\n}\n\nmodule.exports = batch\n"]},"metadata":{},"sourceType":"script"}