{"ast":null,"code":"import mergeOptions from 'merge-options';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { murmur3128 } from '@multiformats/murmur3';\n\nasync function hamtHashFn(buf) {\n  return (await murmur3128.encode(buf)).slice(0, 8).reverse();\n}\n\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file',\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763652,\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 34,\n  hamtBucketBits: 8\n};\nexport default (function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const defaults = mergeOptions.bind({\n    ignoreUndefined: true\n  });\n  return defaults(defaultOptions, options);\n});","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/ipfs-unixfs-importer/esm/src/options.js"],"names":["mergeOptions","sha256","murmur3128","hamtHashFn","buf","encode","slice","reverse","defaultOptions","chunker","strategy","rawLeaves","onlyHash","reduceSingleLeafToSelf","hasher","leafType","cidVersion","progress","shardSplitThreshold","fileImportConcurrency","blockWriteConcurrency","minChunkSize","maxChunkSize","avgChunkSize","window","polynomial","maxChildrenPerNode","layerRepeat","wrapWithDirectory","recursive","hidden","timeout","undefined","hamtHashCode","hamtBucketBits","options","defaults","bind","ignoreUndefined"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AACA,eAAeC,UAAf,CAA0BC,GAA1B,EAA+B;AAC7B,SAAO,CAAC,MAAMF,UAAU,CAACG,MAAX,CAAkBD,GAAlB,CAAP,EAA+BE,KAA/B,CAAqC,CAArC,EAAwC,CAAxC,EAA2CC,OAA3C,EAAP;AACD;;AACD,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,OADY;AAErBC,EAAAA,QAAQ,EAAE,UAFW;AAGrBC,EAAAA,SAAS,EAAE,KAHU;AAIrBC,EAAAA,QAAQ,EAAE,KAJW;AAKrBC,EAAAA,sBAAsB,EAAE,IALH;AAMrBC,EAAAA,MAAM,EAAEb,MANa;AAOrBc,EAAAA,QAAQ,EAAE,MAPW;AAQrBC,EAAAA,UAAU,EAAE,CARS;AASrBC,EAAAA,QAAQ,EAAE,MAAM,MAAM,CACrB,CAVoB;AAWrBC,EAAAA,mBAAmB,EAAE,IAXA;AAYrBC,EAAAA,qBAAqB,EAAE,EAZF;AAarBC,EAAAA,qBAAqB,EAAE,EAbF;AAcrBC,EAAAA,YAAY,EAAE,MAdO;AAerBC,EAAAA,YAAY,EAAE,MAfO;AAgBrBC,EAAAA,YAAY,EAAE,MAhBO;AAiBrBC,EAAAA,MAAM,EAAE,EAjBa;AAkBrBC,EAAAA,UAAU,EAAE,iBAlBS;AAmBrBC,EAAAA,kBAAkB,EAAE,GAnBC;AAoBrBC,EAAAA,WAAW,EAAE,CApBQ;AAqBrBC,EAAAA,iBAAiB,EAAE,KArBE;AAsBrBC,EAAAA,SAAS,EAAE,KAtBU;AAuBrBC,EAAAA,MAAM,EAAE,KAvBa;AAwBrBC,EAAAA,OAAO,EAAEC,SAxBY;AAyBrB7B,EAAAA,UAzBqB;AA0BrB8B,EAAAA,YAAY,EAAE,EA1BO;AA2BrBC,EAAAA,cAAc,EAAE;AA3BK,CAAvB;AA6BA,gBAAe,YAAkB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAC/B,QAAMC,QAAQ,GAAGpC,YAAY,CAACqC,IAAb,CAAkB;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAlB,CAAjB;AACA,SAAOF,QAAQ,CAAC5B,cAAD,EAAiB2B,OAAjB,CAAf;AACD,CAHD","sourcesContent":["import mergeOptions from 'merge-options';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { murmur3128 } from '@multiformats/murmur3';\nasync function hamtHashFn(buf) {\n  return (await murmur3128.encode(buf)).slice(0, 8).reverse();\n}\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file',\n  cidVersion: 0,\n  progress: () => () => {\n  },\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763652,\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 34,\n  hamtBucketBits: 8\n};\nexport default (options = {}) => {\n  const defaults = mergeOptions.bind({ ignoreUndefined: true });\n  return defaults(defaultOptions, options);\n};"]},"metadata":{},"sourceType":"module"}