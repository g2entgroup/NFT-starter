{"ast":null,"code":"'use strict';\n\nconst batch = require('it-batch');\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\n\n\nasync function* parallelBatch(source) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n    /**\n     * @param {() => Promise<T>} p\n     */\n    p => {\n      return p().then(value => ({\n        ok: true,\n        value\n      }), err => ({\n        ok: false,\n        err\n      }));\n    });\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i];\n\n      if (result.ok) {\n        yield result.value;\n      } else {\n        throw result.err;\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/it-parallel-batch/index.js"],"names":["batch","require","parallelBatch","source","size","tasks","things","map","p","then","value","ok","err","i","length","result","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAiBC,aAAjB,CAAgCC,MAAhC,EAAkD;AAAA,MAAVC,IAAU,uEAAH,CAAG;;AAChD,aAAW,MAAMC,KAAjB,IAA0BL,KAAK,CAACG,MAAD,EAASC,IAAT,CAA/B,EAA+C;AAC7C;AACA,UAAME,MAAM,GAAGD,KAAK,CAACE,GAAN;AACb;AACN;AACA;AACMC,IAAAA,CAAC,IAAI;AACH,aAAOA,CAAC,GAAGC,IAAJ,CAASC,KAAK,KAAK;AAAEC,QAAAA,EAAE,EAAE,IAAN;AAAYD,QAAAA;AAAZ,OAAL,CAAd,EAAyCE,GAAG,KAAK;AAAED,QAAAA,EAAE,EAAE,KAAN;AAAaC,QAAAA;AAAb,OAAL,CAA5C,CAAP;AACD,KANY,CAAf;;AAQA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAAM,CAACQ,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAME,MAAM,GAAG,MAAMT,MAAM,CAACO,CAAD,CAA3B;;AAEA,UAAIE,MAAM,CAACJ,EAAX,EAAe;AACb,cAAMI,MAAM,CAACL,KAAb;AACD,OAFD,MAEO;AACL,cAAMK,MAAM,CAACH,GAAb;AACD;AACF;AACF;AACF;;AAEDI,MAAM,CAACC,OAAP,GAAiBf,aAAjB","sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function * parallelBatch (source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n      /**\n       * @param {() => Promise<T>} p\n       */\n      p => {\n        return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n      })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"]},"metadata":{},"sourceType":"script"}