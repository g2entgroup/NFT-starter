{"ast":null,"code":"import BufferList from 'bl/BufferList.js';\nimport { create } from 'rabin-wasm';\nimport errcode from 'err-code';\n\nasync function* rabinChunker(source, options) {\n  let min, max, avg;\n\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize;\n    min = options.minChunkSize;\n    max = options.maxChunkSize;\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');\n  } else {\n    avg = options.avgChunkSize;\n    min = avg / 3;\n    max = avg + avg / 2;\n  }\n\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');\n  }\n\n  if (max < min) {\n    max = min;\n  }\n\n  if (avg < min) {\n    avg = min;\n  }\n\n  const sizepow = Math.floor(Math.log2(avg));\n\n  for await (const chunk of rabin(source, {\n    min: min,\n    max: max,\n    bits: sizepow,\n    window: options.window,\n    polynomial: options.polynomial\n  })) {\n    yield chunk;\n  }\n}\n\nexport default rabinChunker;\n\nasync function* rabin(source, options) {\n  const r = await create(options.bits, options.min, options.max, options.window);\n  const buffers = new BufferList();\n\n  for await (const chunk of source) {\n    buffers.append(chunk);\n    const sizes = r.fingerprint(chunk);\n\n    for (let i = 0; i < sizes.length; i++) {\n      const size = sizes[i];\n      const buf = buffers.slice(0, size);\n      buffers.consume(size);\n      yield buf;\n    }\n  }\n\n  if (buffers.length) {\n    yield buffers.slice(0);\n  }\n}","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/ipfs-unixfs-importer/esm/src/chunker/rabin.js"],"names":["BufferList","create","errcode","rabinChunker","source","options","min","max","avg","minChunkSize","maxChunkSize","avgChunkSize","Error","sizepow","Math","floor","log2","chunk","rabin","bits","window","polynomial","r","buffers","append","sizes","fingerprint","i","length","size","buf","slice","consume"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,UAApB;;AACA,gBAAgBC,YAAhB,CAA6BC,MAA7B,EAAqCC,OAArC,EAA8C;AAC5C,MAAIC,GAAJ,EAASC,GAAT,EAAcC,GAAd;;AACA,MAAIH,OAAO,CAACI,YAAR,IAAwBJ,OAAO,CAACK,YAAhC,IAAgDL,OAAO,CAACM,YAA5D,EAA0E;AACxEH,IAAAA,GAAG,GAAGH,OAAO,CAACM,YAAd;AACAL,IAAAA,GAAG,GAAGD,OAAO,CAACI,YAAd;AACAF,IAAAA,GAAG,GAAGF,OAAO,CAACK,YAAd;AACD,GAJD,MAIO,IAAI,CAACL,OAAO,CAACM,YAAb,EAA2B;AAChC,UAAMT,OAAO,CAAC,IAAIU,KAAJ,CAAU,sCAAV,CAAD,EAAoD,4BAApD,CAAb;AACD,GAFM,MAEA;AACLJ,IAAAA,GAAG,GAAGH,OAAO,CAACM,YAAd;AACAL,IAAAA,GAAG,GAAGE,GAAG,GAAG,CAAZ;AACAD,IAAAA,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAG,CAAlB;AACD;;AACD,MAAIF,GAAG,GAAG,EAAV,EAAc;AACZ,UAAMJ,OAAO,CAAC,IAAIU,KAAJ,CAAU,mCAAV,CAAD,EAAiD,4BAAjD,CAAb;AACD;;AACD,MAAIL,GAAG,GAAGD,GAAV,EAAe;AACbC,IAAAA,GAAG,GAAGD,GAAN;AACD;;AACD,MAAIE,GAAG,GAAGF,GAAV,EAAe;AACbE,IAAAA,GAAG,GAAGF,GAAN;AACD;;AACD,QAAMO,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUR,GAAV,CAAX,CAAhB;;AACA,aAAW,MAAMS,KAAjB,IAA0BC,KAAK,CAACd,MAAD,EAAS;AACpCE,IAAAA,GAAG,EAAEA,GAD+B;AAEpCC,IAAAA,GAAG,EAAEA,GAF+B;AAGpCY,IAAAA,IAAI,EAAEN,OAH8B;AAIpCO,IAAAA,MAAM,EAAEf,OAAO,CAACe,MAJoB;AAKpCC,IAAAA,UAAU,EAAEhB,OAAO,CAACgB;AALgB,GAAT,CAA/B,EAMM;AACJ,UAAMJ,KAAN;AACD;AACF;;AACD,eAAed,YAAf;;AACA,gBAAgBe,KAAhB,CAAsBd,MAAtB,EAA8BC,OAA9B,EAAuC;AACrC,QAAMiB,CAAC,GAAG,MAAMrB,MAAM,CAACI,OAAO,CAACc,IAAT,EAAed,OAAO,CAACC,GAAvB,EAA4BD,OAAO,CAACE,GAApC,EAAyCF,OAAO,CAACe,MAAjD,CAAtB;AACA,QAAMG,OAAO,GAAG,IAAIvB,UAAJ,EAAhB;;AACA,aAAW,MAAMiB,KAAjB,IAA0Bb,MAA1B,EAAkC;AAChCmB,IAAAA,OAAO,CAACC,MAAR,CAAeP,KAAf;AACA,UAAMQ,KAAK,GAAGH,CAAC,CAACI,WAAF,CAAcT,KAAd,CAAd;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAME,IAAI,GAAGJ,KAAK,CAACE,CAAD,CAAlB;AACA,YAAMG,GAAG,GAAGP,OAAO,CAACQ,KAAR,CAAc,CAAd,EAAiBF,IAAjB,CAAZ;AACAN,MAAAA,OAAO,CAACS,OAAR,CAAgBH,IAAhB;AACA,YAAMC,GAAN;AACD;AACF;;AACD,MAAIP,OAAO,CAACK,MAAZ,EAAoB;AAClB,UAAML,OAAO,CAACQ,KAAR,CAAc,CAAd,CAAN;AACD;AACF","sourcesContent":["import BufferList from 'bl/BufferList.js';\nimport { create } from 'rabin-wasm';\nimport errcode from 'err-code';\nasync function* rabinChunker(source, options) {\n  let min, max, avg;\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize;\n    min = options.minChunkSize;\n    max = options.maxChunkSize;\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');\n  } else {\n    avg = options.avgChunkSize;\n    min = avg / 3;\n    max = avg + avg / 2;\n  }\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');\n  }\n  if (max < min) {\n    max = min;\n  }\n  if (avg < min) {\n    avg = min;\n  }\n  const sizepow = Math.floor(Math.log2(avg));\n  for await (const chunk of rabin(source, {\n      min: min,\n      max: max,\n      bits: sizepow,\n      window: options.window,\n      polynomial: options.polynomial\n    })) {\n    yield chunk;\n  }\n}\nexport default rabinChunker;\nasync function* rabin(source, options) {\n  const r = await create(options.bits, options.min, options.max, options.window);\n  const buffers = new BufferList();\n  for await (const chunk of source) {\n    buffers.append(chunk);\n    const sizes = r.fingerprint(chunk);\n    for (let i = 0; i < sizes.length; i++) {\n      const size = sizes[i];\n      const buf = buffers.slice(0, size);\n      buffers.consume(size);\n      yield buf;\n    }\n  }\n  if (buffers.length) {\n    yield buffers.slice(0);\n  }\n}"]},"metadata":{},"sourceType":"module"}