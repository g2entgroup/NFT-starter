{"ast":null,"code":"'use strict';\n\nconst retry = require('retry');\n\nconst networkErrorMsgs = ['Failed to fetch', // Chrome\n'NetworkError when attempting to fetch resource.', // Firefox\n'The Internet connection appears to be offline.', // Safari\n'Network request failed' // `cross-fetch`\n];\n\nclass AbortError extends Error {\n  constructor(message) {\n    super();\n\n    if (message instanceof Error) {\n      this.originalError = message;\n      ({\n        message\n      } = message);\n    } else {\n      this.originalError = new Error(message);\n      this.originalError.stack = this.stack;\n    }\n\n    this.name = 'AbortError';\n    this.message = message;\n  }\n\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n  // Minus 1 from attemptNumber because the first attempt does not count as a retry\n  const retriesLeft = options.retries - (attemptNumber - 1);\n  error.attemptNumber = attemptNumber;\n  error.retriesLeft = retriesLeft;\n  return error;\n};\n\nconst isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);\n\nconst pRetry = (input, options) => new Promise((resolve, reject) => {\n  options = {\n    onFailedAttempt: () => {},\n    retries: 10,\n    ...options\n  };\n  const operation = retry.operation(options);\n  operation.attempt(async attemptNumber => {\n    try {\n      resolve(await input(attemptNumber));\n    } catch (error) {\n      if (!(error instanceof Error)) {\n        reject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n        return;\n      }\n\n      if (error instanceof AbortError) {\n        operation.stop();\n        reject(error.originalError);\n      } else if (error instanceof TypeError && !isNetworkError(error.message)) {\n        operation.stop();\n        reject(error);\n      } else {\n        decorateErrorWithCounts(error, attemptNumber, options);\n\n        try {\n          await options.onFailedAttempt(error);\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (!operation.retry(error)) {\n          reject(operation.mainError());\n        }\n      }\n    }\n  });\n});\n\nmodule.exports = pRetry; // TODO: remove this in the next major version\n\nmodule.exports.default = pRetry;\nmodule.exports.AbortError = AbortError;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/p-retry/index.js"],"names":["retry","require","networkErrorMsgs","AbortError","Error","constructor","message","originalError","stack","name","decorateErrorWithCounts","error","attemptNumber","options","retriesLeft","retries","isNetworkError","errorMessage","includes","pRetry","input","Promise","resolve","reject","onFailedAttempt","operation","attempt","TypeError","stop","mainError","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\nconst retry = require('retry');\n\nconst networkErrorMsgs = [\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari\n\t'Network request failed' // `cross-fetch`\n];\n\nclass AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nconst isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);\n\nconst pRetry = (input, options) => new Promise((resolve, reject) => {\n\toptions = {\n\t\tonFailedAttempt: () => {},\n\t\tretries: 10,\n\t\t...options\n\t};\n\n\tconst operation = retry.operation(options);\n\n\toperation.attempt(async attemptNumber => {\n\t\ttry {\n\t\t\tresolve(await input(attemptNumber));\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof Error)) {\n\t\t\t\treject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (error instanceof AbortError) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error.originalError);\n\t\t\t} else if (error instanceof TypeError && !isNetworkError(error.message)) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\ttry {\n\t\t\t\t\tawait options.onFailedAttempt(error);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\treject(operation.mainError());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\n\nmodule.exports = pRetry;\n// TODO: remove this in the next major version\nmodule.exports.default = pRetry;\n\nmodule.exports.AbortError = AbortError;\n"]},"metadata":{},"sourceType":"script"}