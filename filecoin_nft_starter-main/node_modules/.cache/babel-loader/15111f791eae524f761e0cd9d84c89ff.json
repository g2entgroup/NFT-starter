{"ast":null,"code":"import drain from 'it-drain';\nimport filter from 'it-filter';\nimport take from 'it-take';\nimport all from 'it-all';\n\nconst sortAll = (iterable, sorter) => {\n  return async function* () {\n    const values = await all(iterable);\n    yield* values.sort(sorter);\n  }();\n};\n\nexport class BaseBlockstore {\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n\n  async *putMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const {\n      key,\n      value\n    } of source) {\n      await this.put(key, value, options);\n      yield {\n        key,\n        value\n      };\n    }\n  }\n\n  async *getMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const key of source) {\n      yield this.get(key, options);\n    }\n  }\n\n  async *deleteMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const key of source) {\n      await this.delete(key, options);\n      yield key;\n    }\n  }\n\n  batch() {\n    let puts = [];\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n\n      delete(key) {\n        dels.push(key);\n      },\n\n      commit: async options => {\n        await drain(this.putMany(puts, options));\n        puts = [];\n        await drain(this.deleteMany(dels, options));\n        dels = [];\n      }\n    };\n  }\n\n  async *_all(q, options) {\n    throw new Error('._all is not implemented');\n  }\n\n  async *_allKeys(q, options) {\n    throw new Error('._allKeys is not implemented');\n  }\n\n  query(q, options) {\n    let it = this._all(q, options);\n\n    if (q.prefix != null) {\n      it = filter(it, e => e.key.toString().startsWith(q.prefix || ''));\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= (q.offset || 0));\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n\n    return it;\n  }\n\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n\n    if (q.prefix != null) {\n      it = filter(it, cid => cid.toString().startsWith(q.prefix || ''));\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n\n    return it;\n  }\n\n}","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/blockstore-core/esm/src/base.js"],"names":["drain","filter","take","all","sortAll","iterable","sorter","values","sort","BaseBlockstore","open","Promise","reject","Error","close","put","key","val","options","get","has","delete","putMany","source","value","getMany","deleteMany","batch","puts","dels","push","commit","_all","q","_allKeys","query","it","prefix","e","toString","startsWith","Array","isArray","filters","reduce","f","orders","offset","i","limit","queryKeys","cid"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AACA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACpC,SAAO,mBAAmB;AACxB,UAAMC,MAAM,GAAG,MAAMJ,GAAG,CAACE,QAAD,CAAxB;AACA,WAAOE,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAP;AACD,GAHM,EAAP;AAID,CALD;;AAMA,OAAO,MAAMG,cAAN,CAAqB;AAC1BC,EAAAA,IAAI,GAAG;AACL,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,0BAAV,CAAf,CAAP;AACD;;AACDC,EAAAA,KAAK,GAAG;AACN,WAAOH,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,2BAAV,CAAf,CAAP;AACD;;AACDE,EAAAA,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,EAAoB;AACrB,WAAOP,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,yBAAV,CAAf,CAAP;AACD;;AACDM,EAAAA,GAAG,CAACH,GAAD,EAAME,OAAN,EAAe;AAChB,WAAOP,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,yBAAV,CAAf,CAAP;AACD;;AACDO,EAAAA,GAAG,CAACJ,GAAD,EAAME,OAAN,EAAe;AAChB,WAAOP,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,yBAAV,CAAf,CAAP;AACD;;AACDQ,EAAAA,MAAM,CAACL,GAAD,EAAME,OAAN,EAAe;AACnB,WAAOP,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,4BAAV,CAAf,CAAP;AACD;;AACa,SAAPS,OAAO,CAACC,MAAD,EAAuB;AAAA,QAAdL,OAAc,uEAAJ,EAAI;;AACnC,eAAW,MAAM;AAACF,MAAAA,GAAD;AAAMQ,MAAAA;AAAN,KAAjB,IAAiCD,MAAjC,EAAyC;AACvC,YAAM,KAAKR,GAAL,CAASC,GAAT,EAAcQ,KAAd,EAAqBN,OAArB,CAAN;AACA,YAAM;AACJF,QAAAA,GADI;AAEJQ,QAAAA;AAFI,OAAN;AAID;AACF;;AACa,SAAPC,OAAO,CAACF,MAAD,EAAuB;AAAA,QAAdL,OAAc,uEAAJ,EAAI;;AACnC,eAAW,MAAMF,GAAjB,IAAwBO,MAAxB,EAAgC;AAC9B,YAAM,KAAKJ,GAAL,CAASH,GAAT,EAAcE,OAAd,CAAN;AACD;AACF;;AACgB,SAAVQ,UAAU,CAACH,MAAD,EAAuB;AAAA,QAAdL,OAAc,uEAAJ,EAAI;;AACtC,eAAW,MAAMF,GAAjB,IAAwBO,MAAxB,EAAgC;AAC9B,YAAM,KAAKF,MAAL,CAAYL,GAAZ,EAAiBE,OAAjB,CAAN;AACA,YAAMF,GAAN;AACD;AACF;;AACDW,EAAAA,KAAK,GAAG;AACN,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,WAAO;AACLd,MAAAA,GAAG,CAACC,GAAD,EAAMQ,KAAN,EAAa;AACdI,QAAAA,IAAI,CAACE,IAAL,CAAU;AACRd,UAAAA,GADQ;AAERQ,UAAAA;AAFQ,SAAV;AAID,OANI;;AAOLH,MAAAA,MAAM,CAACL,GAAD,EAAM;AACVa,QAAAA,IAAI,CAACC,IAAL,CAAUd,GAAV;AACD,OATI;;AAULe,MAAAA,MAAM,EAAE,MAAMb,OAAN,IAAiB;AACvB,cAAMlB,KAAK,CAAC,KAAKsB,OAAL,CAAaM,IAAb,EAAmBV,OAAnB,CAAD,CAAX;AACAU,QAAAA,IAAI,GAAG,EAAP;AACA,cAAM5B,KAAK,CAAC,KAAK0B,UAAL,CAAgBG,IAAhB,EAAsBX,OAAtB,CAAD,CAAX;AACAW,QAAAA,IAAI,GAAG,EAAP;AACD;AAfI,KAAP;AAiBD;;AACU,SAAJG,IAAI,CAACC,CAAD,EAAIf,OAAJ,EAAa;AACtB,UAAM,IAAIL,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACc,SAARqB,QAAQ,CAACD,CAAD,EAAIf,OAAJ,EAAa;AAC1B,UAAM,IAAIL,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACDsB,EAAAA,KAAK,CAACF,CAAD,EAAIf,OAAJ,EAAa;AAChB,QAAIkB,EAAE,GAAG,KAAKJ,IAAL,CAAUC,CAAV,EAAaf,OAAb,CAAT;;AACA,QAAIe,CAAC,CAACI,MAAF,IAAY,IAAhB,EAAsB;AACpBD,MAAAA,EAAE,GAAGnC,MAAM,CAACmC,EAAD,EAAKE,CAAC,IAAIA,CAAC,CAACtB,GAAF,CAAMuB,QAAN,GAAiBC,UAAjB,CAA4BP,CAAC,CAACI,MAAF,IAAY,EAAxC,CAAV,CAAX;AACD;;AACD,QAAII,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACU,OAAhB,CAAJ,EAA8B;AAC5BP,MAAAA,EAAE,GAAGH,CAAC,CAACU,OAAF,CAAUC,MAAV,CAAiB,CAACR,EAAD,EAAKS,CAAL,KAAW5C,MAAM,CAACmC,EAAD,EAAKS,CAAL,CAAlC,EAA2CT,EAA3C,CAAL;AACD;;AACD,QAAIK,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACa,MAAhB,CAAJ,EAA6B;AAC3BV,MAAAA,EAAE,GAAGH,CAAC,CAACa,MAAF,CAASF,MAAT,CAAgB,CAACR,EAAD,EAAKS,CAAL,KAAWzC,OAAO,CAACgC,EAAD,EAAKS,CAAL,CAAlC,EAA2CT,EAA3C,CAAL;AACD;;AACD,QAAIH,CAAC,CAACc,MAAF,IAAY,IAAhB,EAAsB;AACpB,UAAIC,CAAC,GAAG,CAAR;AACAZ,MAAAA,EAAE,GAAGnC,MAAM,CAACmC,EAAD,EAAK,MAAMY,CAAC,OAAOf,CAAC,CAACc,MAAF,IAAY,CAAnB,CAAZ,CAAX;AACD;;AACD,QAAId,CAAC,CAACgB,KAAF,IAAW,IAAf,EAAqB;AACnBb,MAAAA,EAAE,GAAGlC,IAAI,CAACkC,EAAD,EAAKH,CAAC,CAACgB,KAAP,CAAT;AACD;;AACD,WAAOb,EAAP;AACD;;AACDc,EAAAA,SAAS,CAACjB,CAAD,EAAIf,OAAJ,EAAa;AACpB,QAAIkB,EAAE,GAAG,KAAKF,QAAL,CAAcD,CAAd,EAAiBf,OAAjB,CAAT;;AACA,QAAIe,CAAC,CAACI,MAAF,IAAY,IAAhB,EAAsB;AACpBD,MAAAA,EAAE,GAAGnC,MAAM,CAACmC,EAAD,EAAKe,GAAG,IAAIA,GAAG,CAACZ,QAAJ,GAAeC,UAAf,CAA0BP,CAAC,CAACI,MAAF,IAAY,EAAtC,CAAZ,CAAX;AACD;;AACD,QAAII,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACU,OAAhB,CAAJ,EAA8B;AAC5BP,MAAAA,EAAE,GAAGH,CAAC,CAACU,OAAF,CAAUC,MAAV,CAAiB,CAACR,EAAD,EAAKS,CAAL,KAAW5C,MAAM,CAACmC,EAAD,EAAKS,CAAL,CAAlC,EAA2CT,EAA3C,CAAL;AACD;;AACD,QAAIK,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACa,MAAhB,CAAJ,EAA6B;AAC3BV,MAAAA,EAAE,GAAGH,CAAC,CAACa,MAAF,CAASF,MAAT,CAAgB,CAACR,EAAD,EAAKS,CAAL,KAAWzC,OAAO,CAACgC,EAAD,EAAKS,CAAL,CAAlC,EAA2CT,EAA3C,CAAL;AACD;;AACD,QAAIH,CAAC,CAACc,MAAF,IAAY,IAAhB,EAAsB;AACpB,UAAIC,CAAC,GAAG,CAAR;AACAZ,MAAAA,EAAE,GAAGnC,MAAM,CAACmC,EAAD,EAAK,MAAMY,CAAC,MAAMf,CAAC,CAACc,MAApB,CAAX;AACD;;AACD,QAAId,CAAC,CAACgB,KAAF,IAAW,IAAf,EAAqB;AACnBb,MAAAA,EAAE,GAAGlC,IAAI,CAACkC,EAAD,EAAKH,CAAC,CAACgB,KAAP,CAAT;AACD;;AACD,WAAOb,EAAP;AACD;;AAzGyB","sourcesContent":["import drain from 'it-drain';\nimport filter from 'it-filter';\nimport take from 'it-take';\nimport all from 'it-all';\nconst sortAll = (iterable, sorter) => {\n  return async function* () {\n    const values = await all(iterable);\n    yield* values.sort(sorter);\n  }();\n};\nexport class BaseBlockstore {\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n  async *putMany(source, options = {}) {\n    for await (const {key, value} of source) {\n      await this.put(key, value, options);\n      yield {\n        key,\n        value\n      };\n    }\n  }\n  async *getMany(source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options);\n    }\n  }\n  async *deleteMany(source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options);\n      yield key;\n    }\n  }\n  batch() {\n    let puts = [];\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n      delete(key) {\n        dels.push(key);\n      },\n      commit: async options => {\n        await drain(this.putMany(puts, options));\n        puts = [];\n        await drain(this.deleteMany(dels, options));\n        dels = [];\n      }\n    };\n  }\n  async *_all(q, options) {\n    throw new Error('._all is not implemented');\n  }\n  async *_allKeys(q, options) {\n    throw new Error('._allKeys is not implemented');\n  }\n  query(q, options) {\n    let it = this._all(q, options);\n    if (q.prefix != null) {\n      it = filter(it, e => e.key.toString().startsWith(q.prefix || ''));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= (q.offset || 0));\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n    if (q.prefix != null) {\n      it = filter(it, cid => cid.toString().startsWith(q.prefix || ''));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n}"]},"metadata":{},"sourceType":"module"}