{"ast":null,"code":"const rawPipe = function () {\n  let res;\n\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  while (fns.length) {\n    res = fns.shift()(res);\n  }\n\n  return res;\n};\n\nconst isIterable = obj => obj && (typeof obj[Symbol.asyncIterator] === 'function' || typeof obj[Symbol.iterator] === 'function' || typeof obj.next === 'function' // Probably, right?\n);\n\nconst isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable(obj.source);\n\nconst duplexPipelineFn = duplex => source => {\n  duplex.sink(source); // TODO: error on sink side is unhandled rejection - this is the same as pull streams\n\n  return duplex.source;\n};\n\nconst pipe = function () {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(fns[0])) {\n    const duplex = fns[0];\n\n    fns[0] = () => duplex.source; // Iterable at start: wrap in function\n\n  } else if (isIterable(fns[0])) {\n    const source = fns[0];\n\n    fns[0] = () => source;\n  }\n\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink;\n    }\n  }\n\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (let i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i]);\n      }\n    }\n  }\n\n  return rawPipe(...fns);\n};\n\nmodule.exports = pipe;\nmodule.exports.pipe = pipe;\nmodule.exports.rawPipe = rawPipe;\nmodule.exports.isIterable = isIterable;\nmodule.exports.isDuplex = isDuplex;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/it-pipe/index.js"],"names":["rawPipe","res","fns","length","shift","isIterable","obj","Symbol","asyncIterator","iterator","next","isDuplex","sink","source","duplexPipelineFn","duplex","pipe","i","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAG,YAAY;AAC1B,MAAIC,GAAJ;;AAD0B,oCAARC,GAAQ;AAARA,IAAAA,GAAQ;AAAA;;AAE1B,SAAOA,GAAG,CAACC,MAAX,EAAmB;AACjBF,IAAAA,GAAG,GAAGC,GAAG,CAACE,KAAJ,GAAYH,GAAZ,CAAN;AACD;;AACD,SAAOA,GAAP;AACD,CAND;;AAQA,MAAMI,UAAU,GAAGC,GAAG,IAAIA,GAAG,KAC3B,OAAOA,GAAG,CAACC,MAAM,CAACC,aAAR,CAAV,KAAqC,UAArC,IACA,OAAOF,GAAG,CAACC,MAAM,CAACE,QAAR,CAAV,KAAgC,UADhC,IAEA,OAAOH,GAAG,CAACI,IAAX,KAAoB,UAHO,CAGI;AAHJ,CAA7B;;AAMA,MAAMC,QAAQ,GAAGL,GAAG,IAAIA,GAAG,IAAI,OAAOA,GAAG,CAACM,IAAX,KAAoB,UAA3B,IAAyCP,UAAU,CAACC,GAAG,CAACO,MAAL,CAA3E;;AAEA,MAAMC,gBAAgB,GAAGC,MAAM,IAAIF,MAAM,IAAI;AAC3CE,EAAAA,MAAM,CAACH,IAAP,CAAYC,MAAZ,EAD2C,CACvB;;AACpB,SAAOE,MAAM,CAACF,MAAd;AACD,CAHD;;AAKA,MAAMG,IAAI,GAAG,YAAY;AAAA,qCAARd,GAAQ;AAARA,IAAAA,GAAQ;AAAA;;AACvB;AACA,MAAIS,QAAQ,CAACT,GAAG,CAAC,CAAD,CAAJ,CAAZ,EAAsB;AACpB,UAAMa,MAAM,GAAGb,GAAG,CAAC,CAAD,CAAlB;;AACAA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAMa,MAAM,CAACF,MAAtB,CAFoB,CAGtB;;AACC,GAJD,MAIO,IAAIR,UAAU,CAACH,GAAG,CAAC,CAAD,CAAJ,CAAd,EAAwB;AAC7B,UAAMW,MAAM,GAAGX,GAAG,CAAC,CAAD,CAAlB;;AACAA,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAMW,MAAf;AACD;;AAED,MAAIX,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB;AAClB;AACA,QAAIQ,QAAQ,CAACT,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAJ,CAAZ,EAAmC;AACjCD,MAAAA,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAH,GAAsBD,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAH,CAAoBS,IAA1C;AACD;AACF;;AAED,MAAIV,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB;AAClB;AACA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,GAAG,CAACC,MAAJ,GAAa,CAAjC,EAAoCc,CAAC,EAArC,EAAyC;AACvC,UAAIN,QAAQ,CAACT,GAAG,CAACe,CAAD,CAAJ,CAAZ,EAAsB;AACpBf,QAAAA,GAAG,CAACe,CAAD,CAAH,GAASH,gBAAgB,CAACZ,GAAG,CAACe,CAAD,CAAJ,CAAzB;AACD;AACF;AACF;;AAED,SAAOjB,OAAO,CAAC,GAAGE,GAAJ,CAAd;AACD,CA5BD;;AA8BAgB,MAAM,CAACC,OAAP,GAAiBH,IAAjB;AACAE,MAAM,CAACC,OAAP,CAAeH,IAAf,GAAsBA,IAAtB;AACAE,MAAM,CAACC,OAAP,CAAenB,OAAf,GAAyBA,OAAzB;AACAkB,MAAM,CAACC,OAAP,CAAed,UAAf,GAA4BA,UAA5B;AACAa,MAAM,CAACC,OAAP,CAAeR,QAAf,GAA0BA,QAA1B","sourcesContent":["const rawPipe = (...fns) => {\n  let res\n  while (fns.length) {\n    res = fns.shift()(res)\n  }\n  return res\n}\n\nconst isIterable = obj => obj && (\n  typeof obj[Symbol.asyncIterator] === 'function' ||\n  typeof obj[Symbol.iterator] === 'function' ||\n  typeof obj.next === 'function' // Probably, right?\n)\n\nconst isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable(obj.source)\n\nconst duplexPipelineFn = duplex => source => {\n  duplex.sink(source) // TODO: error on sink side is unhandled rejection - this is the same as pull streams\n  return duplex.source\n}\n\nconst pipe = (...fns) => {\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(fns[0])) {\n    const duplex = fns[0]\n    fns[0] = () => duplex.source\n  // Iterable at start: wrap in function\n  } else if (isIterable(fns[0])) {\n    const source = fns[0]\n    fns[0] = () => source\n  }\n\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink\n    }\n  }\n\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (let i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i])\n      }\n    }\n  }\n\n  return rawPipe(...fns)\n}\n\nmodule.exports = pipe\nmodule.exports.pipe = pipe\nmodule.exports.rawPipe = rawPipe\nmodule.exports.isIterable = isIterable\nmodule.exports.isDuplex = isDuplex\n"]},"metadata":{},"sourceType":"script"}