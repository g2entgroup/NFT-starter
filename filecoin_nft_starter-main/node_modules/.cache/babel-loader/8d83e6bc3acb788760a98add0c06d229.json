{"ast":null,"code":"import { Token, Type } from './token.js';\nimport { assertEnoughData, decodeErrPrefix } from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport { toString } from './byte-utils.js';\n\nfunction toToken(data, pos, prefix, length) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  return new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n}\n\nexport function decodeStringCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n\n  if (typeof l === 'bigint') {\n    throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);\n  }\n\n  return toToken(data, pos, 9, l);\n}\nexport const encodeString = encodeBytes;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/cborg/esm/lib/3string.js"],"names":["Token","Type","assertEnoughData","decodeErrPrefix","uint","encodeBytes","toString","toToken","data","pos","prefix","length","totLength","string","decodeStringCompact","minor","_options","decodeString8","_minor","options","readUint8","decodeString16","readUint16","decodeString32","readUint32","decodeString64","l","readUint64","Error","encodeString"],"mappings":"AAAA,SACEA,KADF,EAEEC,IAFF,QAGO,YAHP;AAIA,SACEC,gBADF,EAEEC,eAFF,QAGO,aAHP;AAIA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,iBAAzB;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4C;AAC1C,QAAMC,SAAS,GAAGF,MAAM,GAAGC,MAA3B;AACAT,EAAAA,gBAAgB,CAACM,IAAD,EAAOC,GAAP,EAAYG,SAAZ,CAAhB;AACA,SAAO,IAAIZ,KAAJ,CAAUC,IAAI,CAACY,MAAf,EAAuBP,QAAQ,CAACE,IAAD,EAAOC,GAAG,GAAGC,MAAb,EAAqBD,GAAG,GAAGG,SAA3B,CAA/B,EAAsEA,SAAtE,CAAP;AACD;;AACD,OAAO,SAASE,mBAAT,CAA6BN,IAA7B,EAAmCC,GAAnC,EAAwCM,KAAxC,EAA+CC,QAA/C,EAAyD;AAC9D,SAAOT,OAAO,CAACC,IAAD,EAAOC,GAAP,EAAY,CAAZ,EAAeM,KAAf,CAAd;AACD;AACD,OAAO,SAASE,aAAT,CAAuBT,IAAvB,EAA6BC,GAA7B,EAAkCS,MAAlC,EAA0CC,OAA1C,EAAmD;AACxD,SAAOZ,OAAO,CAACC,IAAD,EAAOC,GAAP,EAAY,CAAZ,EAAeL,IAAI,CAACgB,SAAL,CAAeZ,IAAf,EAAqBC,GAAG,GAAG,CAA3B,EAA8BU,OAA9B,CAAf,CAAd;AACD;AACD,OAAO,SAASE,cAAT,CAAwBb,IAAxB,EAA8BC,GAA9B,EAAmCS,MAAnC,EAA2CC,OAA3C,EAAoD;AACzD,SAAOZ,OAAO,CAACC,IAAD,EAAOC,GAAP,EAAY,CAAZ,EAAeL,IAAI,CAACkB,UAAL,CAAgBd,IAAhB,EAAsBC,GAAG,GAAG,CAA5B,EAA+BU,OAA/B,CAAf,CAAd;AACD;AACD,OAAO,SAASI,cAAT,CAAwBf,IAAxB,EAA8BC,GAA9B,EAAmCS,MAAnC,EAA2CC,OAA3C,EAAoD;AACzD,SAAOZ,OAAO,CAACC,IAAD,EAAOC,GAAP,EAAY,CAAZ,EAAeL,IAAI,CAACoB,UAAL,CAAgBhB,IAAhB,EAAsBC,GAAG,GAAG,CAA5B,EAA+BU,OAA/B,CAAf,CAAd;AACD;AACD,OAAO,SAASM,cAAT,CAAwBjB,IAAxB,EAA8BC,GAA9B,EAAmCS,MAAnC,EAA2CC,OAA3C,EAAoD;AACzD,QAAMO,CAAC,GAAGtB,IAAI,CAACuB,UAAL,CAAgBnB,IAAhB,EAAsBC,GAAG,GAAG,CAA5B,EAA+BU,OAA/B,CAAV;;AACA,MAAI,OAAOO,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIE,KAAJ,CAAW,GAAGzB,eAAiB,8CAA/B,CAAN;AACD;;AACD,SAAOI,OAAO,CAACC,IAAD,EAAOC,GAAP,EAAY,CAAZ,EAAeiB,CAAf,CAAd;AACD;AACD,OAAO,MAAMG,YAAY,GAAGxB,WAArB","sourcesContent":["import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  assertEnoughData,\n  decodeErrPrefix\n} from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport { toString } from './byte-utils.js';\nfunction toToken(data, pos, prefix, length) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  return new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n}\nexport function decodeStringCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer string lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nexport const encodeString = encodeBytes;"]},"metadata":{},"sourceType":"module"}