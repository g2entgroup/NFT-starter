{"ast":null,"code":"/**\n * An implementation of the CAR reader interface that is backed by a blockstore.\n *\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@ipld/car/api').CarReader} CarReader\n * @implements {CarReader}\n */\nexport class BlockstoreCarReader {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {import('ipfs-car/blockstore').Blockstore} blockstore\n   */\n  constructor(version, roots, blockstore) {\n    /**\n     * @private\n     */\n    this._version = version;\n    /**\n     * @private\n     */\n\n    this._roots = roots;\n    /**\n     * @private\n     */\n\n    this._blockstore = blockstore;\n  }\n\n  get version() {\n    return this._version;\n  }\n\n  get blockstore() {\n    return this._blockstore;\n  }\n\n  async getRoots() {\n    return this._roots;\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  has(cid) {\n    return this._blockstore.has(cid);\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  async get(cid) {\n    const bytes = await this._blockstore.get(cid);\n    return {\n      cid,\n      bytes\n    };\n  }\n\n  blocks() {\n    return this._blockstore.blocks();\n  }\n\n  async *cids() {\n    for await (const b of this.blocks()) {\n      yield b.cid;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/nft.storage/src/bs-car-reader.js"],"names":["BlockstoreCarReader","constructor","version","roots","blockstore","_version","_roots","_blockstore","getRoots","has","cid","get","bytes","blocks","cids","b"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAN,CAA0B;AAC/B;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,UAAjB,EAA6B;AACtC;AACJ;AACA;AACI,SAAKC,QAAL,GAAgBH,OAAhB;AACA;AACJ;AACA;;AACI,SAAKI,MAAL,GAAcH,KAAd;AACA;AACJ;AACA;;AACI,SAAKI,WAAL,GAAmBH,UAAnB;AACD;;AAEU,MAAPF,OAAO,GAAG;AACZ,WAAO,KAAKG,QAAZ;AACD;;AAEa,MAAVD,UAAU,GAAG;AACf,WAAO,KAAKG,WAAZ;AACD;;AAEa,QAARC,QAAQ,GAAG;AACf,WAAO,KAAKF,MAAZ;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,GAAG,CAACC,GAAD,EAAM;AACP,WAAO,KAAKH,WAAL,CAAiBE,GAAjB,CAAqBC,GAArB,CAAP;AACD;AAED;AACF;AACA;;;AACW,QAAHC,GAAG,CAACD,GAAD,EAAM;AACb,UAAME,KAAK,GAAG,MAAM,KAAKL,WAAL,CAAiBI,GAAjB,CAAqBD,GAArB,CAApB;AACA,WAAO;AAAEA,MAAAA,GAAF;AAAOE,MAAAA;AAAP,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKN,WAAL,CAAiBM,MAAjB,EAAP;AACD;;AAEU,SAAJC,IAAI,GAAG;AACZ,eAAW,MAAMC,CAAjB,IAAsB,KAAKF,MAAL,EAAtB,EAAqC;AACnC,YAAME,CAAC,CAACL,GAAR;AACD;AACF;;AAxD8B","sourcesContent":["/**\n * An implementation of the CAR reader interface that is backed by a blockstore.\n *\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@ipld/car/api').CarReader} CarReader\n * @implements {CarReader}\n */\nexport class BlockstoreCarReader {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {import('ipfs-car/blockstore').Blockstore} blockstore\n   */\n  constructor(version, roots, blockstore) {\n    /**\n     * @private\n     */\n    this._version = version\n    /**\n     * @private\n     */\n    this._roots = roots\n    /**\n     * @private\n     */\n    this._blockstore = blockstore\n  }\n\n  get version() {\n    return this._version\n  }\n\n  get blockstore() {\n    return this._blockstore\n  }\n\n  async getRoots() {\n    return this._roots\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  has(cid) {\n    return this._blockstore.has(cid)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  async get(cid) {\n    const bytes = await this._blockstore.get(cid)\n    return { cid, bytes }\n  }\n\n  blocks() {\n    return this._blockstore.blocks()\n  }\n\n  async *cids() {\n    for await (const b of this.blocks()) {\n      yield b.cid\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}