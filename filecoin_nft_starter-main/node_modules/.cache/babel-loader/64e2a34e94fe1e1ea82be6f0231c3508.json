{"ast":null,"code":"import { alloc, concat, slice } from './byte-utils.js';\nconst defaultChunkSize = 256;\nexport class Bl {\n  constructor() {\n    let chunkSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultChunkSize;\n    this.chunkSize = chunkSize;\n    this.cursor = 0;\n    this.maxCursor = -1;\n    this.chunks = [];\n    this._initReuseChunk = null;\n  }\n\n  reset() {\n    this.chunks = [];\n    this.cursor = 0;\n    this.maxCursor = -1;\n\n    if (this._initReuseChunk !== null) {\n      this.chunks.push(this._initReuseChunk);\n      this.maxCursor = this._initReuseChunk.length - 1;\n    }\n  }\n\n  push(bytes) {\n    let topChunk = this.chunks[this.chunks.length - 1];\n    const newMax = this.cursor + bytes.length;\n\n    if (newMax <= this.maxCursor + 1) {\n      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n      topChunk.set(bytes, chunkPos);\n    } else {\n      if (topChunk) {\n        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n\n        if (chunkPos < topChunk.length) {\n          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);\n          this.maxCursor = this.cursor - 1;\n        }\n      }\n\n      if (bytes.length < 64 && bytes.length < this.chunkSize) {\n        topChunk = alloc(this.chunkSize);\n        this.chunks.push(topChunk);\n        this.maxCursor += topChunk.length;\n\n        if (this._initReuseChunk === null) {\n          this._initReuseChunk = topChunk;\n        }\n\n        topChunk.set(bytes, 0);\n      } else {\n        this.chunks.push(bytes);\n        this.maxCursor += bytes.length;\n      }\n    }\n\n    this.cursor += bytes.length;\n  }\n\n  toBytes() {\n    let reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let byts;\n\n    if (this.chunks.length === 1) {\n      const chunk = this.chunks[0];\n\n      if (reset && this.cursor > chunk.length / 2) {\n        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n        this._initReuseChunk = null;\n        this.chunks = [];\n      } else {\n        byts = slice(chunk, 0, this.cursor);\n      }\n    } else {\n      byts = concat(this.chunks, this.cursor);\n    }\n\n    if (reset) {\n      this.reset();\n    }\n\n    return byts;\n  }\n\n}","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/cborg/esm/lib/bl.js"],"names":["alloc","concat","slice","defaultChunkSize","Bl","constructor","chunkSize","cursor","maxCursor","chunks","_initReuseChunk","reset","push","length","bytes","topChunk","newMax","chunkPos","set","subarray","toBytes","byts","chunk"],"mappings":"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","sourcesContent":["import {\n  alloc,\n  concat,\n  slice\n} from './byte-utils.js';\nconst defaultChunkSize = 256;\nexport class Bl {\n  constructor(chunkSize = defaultChunkSize) {\n    this.chunkSize = chunkSize;\n    this.cursor = 0;\n    this.maxCursor = -1;\n    this.chunks = [];\n    this._initReuseChunk = null;\n  }\n  reset() {\n    this.chunks = [];\n    this.cursor = 0;\n    this.maxCursor = -1;\n    if (this._initReuseChunk !== null) {\n      this.chunks.push(this._initReuseChunk);\n      this.maxCursor = this._initReuseChunk.length - 1;\n    }\n  }\n  push(bytes) {\n    let topChunk = this.chunks[this.chunks.length - 1];\n    const newMax = this.cursor + bytes.length;\n    if (newMax <= this.maxCursor + 1) {\n      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n      topChunk.set(bytes, chunkPos);\n    } else {\n      if (topChunk) {\n        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n        if (chunkPos < topChunk.length) {\n          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);\n          this.maxCursor = this.cursor - 1;\n        }\n      }\n      if (bytes.length < 64 && bytes.length < this.chunkSize) {\n        topChunk = alloc(this.chunkSize);\n        this.chunks.push(topChunk);\n        this.maxCursor += topChunk.length;\n        if (this._initReuseChunk === null) {\n          this._initReuseChunk = topChunk;\n        }\n        topChunk.set(bytes, 0);\n      } else {\n        this.chunks.push(bytes);\n        this.maxCursor += bytes.length;\n      }\n    }\n    this.cursor += bytes.length;\n  }\n  toBytes(reset = false) {\n    let byts;\n    if (this.chunks.length === 1) {\n      const chunk = this.chunks[0];\n      if (reset && this.cursor > chunk.length / 2) {\n        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n        this._initReuseChunk = null;\n        this.chunks = [];\n      } else {\n        byts = slice(chunk, 0, this.cursor);\n      }\n    } else {\n      byts = concat(this.chunks, this.cursor);\n    }\n    if (reset) {\n      this.reset();\n    }\n    return byts;\n  }\n}"]},"metadata":{},"sourceType":"module"}