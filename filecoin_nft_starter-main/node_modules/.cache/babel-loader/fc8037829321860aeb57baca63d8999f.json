{"ast":null,"code":"import { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\n\nclass DirFlat extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n\n  directChildrenCount() {\n    return this.childCount();\n  }\n\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n\n}\n\nexport default DirFlat;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/ipfs-unixfs-importer/esm/src/dir-flat.js"],"names":["encode","prepare","UnixFS","Dir","persist","DirFlat","constructor","props","options","_children","put","name","value","cid","undefined","size","get","Promise","resolve","childCount","Object","keys","length","directChildrenCount","onlyChild","eachChildSeries","i","key","child","flush","block","children","links","entry","push","Name","Tsize","Hash","unixfs","type","mtime","mode","node","Data","marshal","Links","buffer","reduce","acc","curr","path"],"mappings":"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","sourcesContent":["import {\n  encode,\n  prepare\n} from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nclass DirFlat extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n  directChildrenCount() {\n    return this.childCount();\n  }\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n}\nexport default DirFlat;"]},"metadata":{},"sourceType":"module"}