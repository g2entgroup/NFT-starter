{"ast":null,"code":"import BufferList from 'bl/BufferList.js';\n\nasync function* fixedSizeChunker(source, options) {\n  let bl = new BufferList();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n\n  for await (const buffer of source) {\n    bl.append(buffer);\n    currentLength += buffer.length;\n\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize);\n      emitted = true;\n\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList();\n        currentLength = 0;\n      } else {\n        const newBl = new BufferList();\n        newBl.append(bl.shallowSlice(maxChunkSize));\n        bl = newBl;\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    yield bl.slice(0, currentLength);\n  }\n}\n\nexport default fixedSizeChunker;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/ipfs-unixfs-importer/esm/src/chunker/fixed-size.js"],"names":["BufferList","fixedSizeChunker","source","options","bl","currentLength","emitted","maxChunkSize","buffer","append","length","slice","newBl","shallowSlice"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;;AACA,gBAAgBC,gBAAhB,CAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;AAChD,MAAIC,EAAE,GAAG,IAAIJ,UAAJ,EAAT;AACA,MAAIK,aAAa,GAAG,CAApB;AACA,MAAIC,OAAO,GAAG,KAAd;AACA,QAAMC,YAAY,GAAGJ,OAAO,CAACI,YAA7B;;AACA,aAAW,MAAMC,MAAjB,IAA2BN,MAA3B,EAAmC;AACjCE,IAAAA,EAAE,CAACK,MAAH,CAAUD,MAAV;AACAH,IAAAA,aAAa,IAAIG,MAAM,CAACE,MAAxB;;AACA,WAAOL,aAAa,IAAIE,YAAxB,EAAsC;AACpC,YAAMH,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYJ,YAAZ,CAAN;AACAD,MAAAA,OAAO,GAAG,IAAV;;AACA,UAAIC,YAAY,KAAKH,EAAE,CAACM,MAAxB,EAAgC;AAC9BN,QAAAA,EAAE,GAAG,IAAIJ,UAAJ,EAAL;AACAK,QAAAA,aAAa,GAAG,CAAhB;AACD,OAHD,MAGO;AACL,cAAMO,KAAK,GAAG,IAAIZ,UAAJ,EAAd;AACAY,QAAAA,KAAK,CAACH,MAAN,CAAaL,EAAE,CAACS,YAAH,CAAgBN,YAAhB,CAAb;AACAH,QAAAA,EAAE,GAAGQ,KAAL;AACAP,QAAAA,aAAa,IAAIE,YAAjB;AACD;AACF;AACF;;AACD,MAAI,CAACD,OAAD,IAAYD,aAAhB,EAA+B;AAC7B,UAAMD,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYN,aAAZ,CAAN;AACD;AACF;;AACD,eAAeJ,gBAAf","sourcesContent":["import BufferList from 'bl/BufferList.js';\nasync function* fixedSizeChunker(source, options) {\n  let bl = new BufferList();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n  for await (const buffer of source) {\n    bl.append(buffer);\n    currentLength += buffer.length;\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize);\n      emitted = true;\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList();\n        currentLength = 0;\n      } else {\n        const newBl = new BufferList();\n        newBl.append(bl.shallowSlice(maxChunkSize));\n        bl = newBl;\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n  if (!emitted || currentLength) {\n    yield bl.slice(0, currentLength);\n  }\n}\nexport default fixedSizeChunker;"]},"metadata":{},"sourceType":"module"}