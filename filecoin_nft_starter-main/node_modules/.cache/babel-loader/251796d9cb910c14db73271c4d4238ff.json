{"ast":null,"code":"import * as Digest from './digest.js';\nexport const from = _ref => {\n  let {\n    name,\n    code,\n    encode\n  } = _ref;\n  return new Hasher(name, code, encode);\n};\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n\n  async digest(input) {\n    if (input instanceof Uint8Array) {\n      const digest = await this.encode(input);\n      return Digest.create(this.code, digest);\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/multiformats/esm/src/hashes/hasher.js"],"names":["Digest","from","name","code","encode","Hasher","constructor","digest","input","Uint8Array","create","Error"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AACA,OAAO,MAAMC,IAAI,GAAG;AAAA,MAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,IAAP;AAAaC,IAAAA;AAAb,GAAD;AAAA,SAA0B,IAAIC,MAAJ,CAAWH,IAAX,EAAiBC,IAAjB,EAAuBC,MAAvB,CAA1B;AAAA,CAAb;AACP,OAAO,MAAMC,MAAN,CAAa;AAClBC,EAAAA,WAAW,CAACJ,IAAD,EAAOC,IAAP,EAAaC,MAAb,EAAqB;AAC9B,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AACW,QAANG,MAAM,CAACC,KAAD,EAAQ;AAClB,QAAIA,KAAK,YAAYC,UAArB,EAAiC;AAC/B,YAAMF,MAAM,GAAG,MAAM,KAAKH,MAAL,CAAYI,KAAZ,CAArB;AACA,aAAOR,MAAM,CAACU,MAAP,CAAc,KAAKP,IAAnB,EAAyBI,MAAzB,CAAP;AACD,KAHD,MAGO;AACL,YAAMI,KAAK,CAAC,mCAAD,CAAX;AACD;AACF;;AAbiB","sourcesContent":["import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  async digest(input) {\n    if (input instanceof Uint8Array) {\n      const digest = await this.encode(input);\n      return Digest.create(this.code, digest);\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}