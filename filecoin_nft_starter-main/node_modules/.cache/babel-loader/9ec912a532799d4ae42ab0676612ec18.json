{"ast":null,"code":"import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n\nasync function* validateChunks(source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n    }\n\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content.toString());\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content);\n    } else if (content instanceof Uint8Array) {\n      yield content;\n    } else {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n    }\n  }\n}\n\nexport default validateChunks;","map":{"version":3,"sources":["/Users/g2musicgroup/Developer/NFT-starter/filecoin_nft_starter-main/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/validate-chunks.js"],"names":["errCode","fromString","uint8ArrayFromString","validateChunks","source","content","length","undefined","Error","String","toString","Array","isArray","Uint8Array","from"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;;AACA,gBAAgBC,cAAhB,CAA+BC,MAA/B,EAAuC;AACrC,aAAW,MAAMC,OAAjB,IAA4BD,MAA5B,EAAoC;AAClC,QAAIC,OAAO,CAACC,MAAR,KAAmBC,SAAvB,EAAkC;AAChC,YAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,qBAAV,CAAD,EAAmC,qBAAnC,CAAb;AACD;;AACD,QAAI,OAAOH,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,YAAYI,MAAtD,EAA8D;AAC5D,YAAMP,oBAAoB,CAACG,OAAO,CAACK,QAAR,EAAD,CAA1B;AACD,KAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAJ,EAA4B;AACjC,YAAMQ,UAAU,CAACC,IAAX,CAAgBT,OAAhB,CAAN;AACD,KAFM,MAEA,IAAIA,OAAO,YAAYQ,UAAvB,EAAmC;AACxC,YAAMR,OAAN;AACD,KAFM,MAEA;AACL,YAAML,OAAO,CAAC,IAAIQ,KAAJ,CAAU,qBAAV,CAAD,EAAmC,qBAAnC,CAAb;AACD;AACF;AACF;;AACD,eAAeL,cAAf","sourcesContent":["import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nasync function* validateChunks(source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n    }\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content.toString());\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content);\n    } else if (content instanceof Uint8Array) {\n      yield content;\n    } else {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n    }\n  }\n}\nexport default validateChunks;"]},"metadata":{},"sourceType":"module"}